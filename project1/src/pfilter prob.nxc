/* Written by Kevin Alexander Lee

  This is an implementation of NXT robot localization using probability and
  particle filters.

  Using the grid based map accompanying the code, the robot which initially
  has no information about its coordinate position will be able to locate itself
  and move to a specific target and destination.
  
  The NXT robot uses aspects of particle filters and probability sensing to
  determine which position it is likely at.
  
*/

/* the following section defines macros */

/* macros for directions, chosen to not conflict with other definitions
   and to allow arithmetic between directions*/
#define NORTH 100
#define EAST 101
#define SOUTH 102
#define WEST 103

/* macros for diagonal directions */
#define NORTHEAST 1000
#define SOUTHEAST 1001
#define SOUTHWEST 1002
#define NORTHWEST 1003

/* File related macros */
#define FILENAME "mapdata.txt"
#define READSIZE 10

/* Function like macro to convert characters from files to the corresponding
   int value.*/
#define ASCII_TO_INT(a) a-48

/* macros for the map dimensions. Based on yellow grid intersections*/
#define GWIDTH 3
#define GHEIGHT 5

/* macros for probability sensing
   THRESHOLD - a decimal value in (0,1). Determines when a particle is likely enough to be the robot's
               position
   MATCH - a decimal value in (0,1). How much to affect the probability when a particle's data matches
           the robot's surroundings, should be greater than MISMATCH
   MISMATCH - a decimal value in (0,1). How much to affect the probability when a particle's data does not
              match the robot's surroundings, should be less than MATCH

   decide these values for yourself
   */
#define THRESHOLD 0.8
// mismatch values are now defined in the start of main method

/* You may want to define macros to keep track of certain turning angles and
   speeds throughout your code. This provides an easy way to change them */

#define WHI 6
#define RED 5
#define YEL 4
#define GRN 3
#define BLU 2
#define BLK 1

/* Some movement and math macros */
#define adjustR(angle) RotateMotorEx(OUT_BC, 20, angle, -100, true, false);
#define adjustL(angle) RotateMotorEx(OUT_BC, 20, angle, 100, true, false);
#define coordToIndex(x, y) (5 * x) + y
#define absDirection(heading, dir) (heading + dir) % 4 + 1000

/* Represents a single particle.

   Each particle has a coordinate given by x and y and also a direction.

   The probability attached to a particle is the likelihood of it being the
   actual position and heading of the robot. This is updated based on the
   robot's surroundings.
   */
struct particle{
  int x;
  int y;
  int theta;
  float prob; /* weight of a particle representing probability */
};

/* Represents an interesection (yellow square) on the grid.

   Holds data on the surroundings of the intersection, namely coloured(or white)
   squares to the NE, SE, SW, NW of the interesection.
   
   Note that the directions are by default in terms of compass directions.
   When given a heading, the directions will change relative to the heading.
   */
struct intersection{
  int NE;
  int SE;
  int SW;
  int NW;
};

/* function prototypes, to be added if needed
*/

/**
* Gets the color from sensor using multiple samples. Defaults to 72.
* Assuming a zero-mean gaussian model for the noise, an average over
* a set of samples should give us a good reading.
*/
inline int getColor(int samples = 72){
  int i;
  // Counters for each individual color. k is black.
  int w = 0, r = 0, y = 0, g = 0, b = 0, k = 0;
  for (i = 0; i < samples; i++){
    // Sample for however samples given, waiting two milliseconds in between
    // Increment the read color on each sample.
    int color = Sensor(IN_1);
    if (color == WHI) w++;
    else if (color == RED) r++;
    else if (color == YEL) y++;
    else if (color == GRN) g++;
    else if (color == BLU) b++;
    else if (color == BLK) k++;
    Wait(2);
  }
  // Return the color with the highest counter.
  int max = 0;
  int color = 0;
  if (k > max){
    max = k;
    color = BLK;
  }
  if (b > max){
    max = b;
    color = BLU;
  }
  if (g > max){
    max = g;
    color = GRN;
  }
  if (y > max){
    max = y;
    color = YEL;
  }
  if (r > max){
    max = r;
    color = RED;
  }
  if (w > max) color = WHI;
  return color;
}

/**
* Moves the robot at specified speed untill a color has changed.
* return: the changed color's value.
*/
int moveUntilColorChange(int speed){
  int startColor = getColor(); // Starting color
  int color;
  // Using on fwd sync to provide better wheel synchronization.
  OnFwdSync(OUT_BC, speed, 0);
  // Keep moving forward untill a color that is different from the start 
  // color is read.
  while (true){
    color = getColor();
    if (startColor != color){
      // Stop motor, break loop, and return color.
      Off(OUT_BC);
      return color;
    }
  }
}

/**
* Move the robot forward untill a building color is detected. Current color is given 
* so that if the robot is already on a building, it wont register as valid untill a 
* different color from current color is read. 
* When crossRoad is true, black or yellow must be crossed in order for a building color
* to register as valid. 
* return: the building color that ended up being registered. 
*/
int moveUntilBuilding(int speed, int currentColor, bool crossRoad){
  OnFwdSync(OUT_BC, speed, 0);
  int color;
  bool colorChanged = false; // Stays false untill a color change is detected.
  while (true){
    color = getColor(180);
    // Condition given to start recognizing building colors.
    // When crossRoad is false, the right side of the and statement is ignored (is true).
    // Otherwise, the left side is considered: a black or yellow must be read for colorChanged
    // to be set to true.
    if (color != currentColor && (!crossRoad || (color == YEL || color == BLK))) colorChanged = true;
    if (colorChanged && (color == GRN || color == BLU || color == WHI)){
      Off(OUT_BC);
      return color;
    }
  }
}

/**
* Move forward at given speed untill the given color is hit.
*/
void moveUntilColor(int speed, int c){
  OnFwdSync(OUT_BC, speed, 0);
  int color;
  while (true){
    color = getColor();
    if (color == c){
      Off(OUT_BC);
      return;
    }
  }
}

/**
* Goes in reverse at the specified speed for the given number of clock ticks.
*/
inline void revFor(int speed, long ticks){
  long t0 = CurrentTick();
  OnFwdSync(OUT_BC, -speed, 0);
  until( (CurrentTick() - t0) > ticks);
  Off(OUT_BC);
}

/* Nudge the robot forward a bit at a default speed of 20*/
inline void nudgeForward(int speed = 20){
  RotateMotor(OUT_BC, speed, 80);
}

/* Turn robot right 90 deg */
inline void right90(){
  RotateMotorEx(OUT_BC, 25, 270, -100, true, false);
  nudgeForward();
}

/* Turn robot right 180 deg */
inline void right180(){
  RotateMotorEx(OUT_BC, 25, 530, -100, true, false);
  nudgeForward();
}

/* Turn robot left 90 deg */
inline void left90(){
  RotateMotorEx(OUT_BC, 25, 270, 100, true, false);
  nudgeForward();
}

/* Turn robot right 45 deg, without nudging it after. */
inline void adjustR45(){
  RotateMotorEx(OUT_BC, 25, 140, -100, true, true);
}

/* Turn robot left 45 deg, without nudging it after. */
inline void adjustL45(){
  RotateMotorEx(OUT_BC, 25, 140, 100, true, true);
}

/* Turn robot left 90 deg, without nudging it after. */
inline void adjustL90(){
  RotateMotorEx(OUT_BC, 25, 270, 100, true, true);
}

/**
* Turn both wheels independantly forward, turning one wheel first for 5 tries,
* returning to the starting position, then turning the other wheel for 5. 
* This is used to attempt to relocate the robot's sensor back on black.
*/
inline void adjustToBlack(){
  bool adjDir = true; // true --> right
  bool adjCount = 0;
  while(getColor(128) != BLK){
    if (adjCount == 5){
      if (adjDir)
        RotateMotor(OUT_B, -40, 450);
      else
        RotateMotor(OUT_C, -40, 450);
      adjDir = !adjDir;
      adjCount = 0;
    }
    if (adjDir)
      RotateMotor(OUT_B, 30, 90);
    else
      RotateMotor(OUT_C, 30, 90);;
    adjCount += 1;
  }
}


/* Subroutine which moves the robot forward from one intersection to the next
*/
sub move_robot(){
  ////////////////////////////////////////////////////////////////////////////
  //  TO DO:
  //
  //  Complete this subroutine.
  //  Your robot will need to nagivates its way from one interesection to the
  //  next. If it reaches a red boundary, it will do a 180 degree turn and
  //  return to the previous intersection facing in the opposite direction.
  //
  //  You may need to account for motor "noise" as your robot will not always
  //  make turns perfectly and go straight forward each time.
  //
  ////////////////////////////////////////////////////////////////////////////

  long t0, t1; // To keep track of current time taken (t1), and previous time taken(t0).
  bool d0, d1; // To keep track of current direction(d1), and previous direction taken(d0).
  long sTime;

  t0 = 0;
  d0 = false; // true -> adjust right. Left otherwise. 

  // Assume we start somewhere near black, if not on it.
  while(true){
    // If current color is not black, we need to adjust the sensor so that it is on it.
    if (getColor() != BLK)
      adjustToBlack();
    // Keep track of start time, using the current processor tick.
    sTime = CurrentTick();
    // Move untill a color changed. Assuming we're on black, this color change means
    // the robot is not on black anymore.
    int curColor = moveUntilColorChange(30);
    t1 = CurrentTick() - sTime; // Store the time we spent staying on black.
    if (curColor == YEL){
      // Stop if on intersection.
      return;
    }
    else if (curColor == RED){
      // 180 if on red.
      right180();
    }
    else if (curColor != BLK){
      // Means we most likely went off the road. Move robot back and adjust direction.
      // Go in reverse the time we took to go forward. 0.7 is used to scale the time, since
      // for some reason, the robot moves backwards more than going forward. 
      revFor(30, t1 * 0.7);
      if (t1 >= t0)
        // If our current time we stayed on black for was better than before, that means
        // we are on our path to the right orientation. Adjust in the same direction as the
        // previous adjustment. 
        d1 = d0; 
      else
        // Otherwise, our previous turn made our time on black shorter, and is therefore a bad 
        // adjustment. We adjust the oposite way. 
        d1 = !d0;
      // Execute the adjustment based upon the d1 value calculated above.
      if (d1) {adjustR(30);}
      else {adjustL(30);}
    }

    // Shift t1, d1 to t0, d0 to set the current readings to the previous readings in
    // preparation for the next round.
    t0 = t1;
    d0 = d1;
  }
}

/* This function scans the surroundings of the robot.
   It takes readings of the colour of the 4 squares surrounding the
   intersection and returns an intersection variable which holds the data.
*/
intersection scan_surroundings(){
  intersection rsense;
  ////////////////////////////////////////////////////////////////////////////
  // TO DO:
  //
  // Implement a function in which the robot will scan the colour of the
  // surrounding squares at an interesection.
  // It will use the colour sensor to take readings from all four squares
  // in each of the NE, SE, SW, NW directions relative to the forward facing
  // direction of the robot.
  //
  ////////////////////////////////////////////////////////////////////////////

  int pinpointF = 108;  // Some angle movement values used to pinpoint the bot's
  int pinpointB = 110; // orientation on the yellow square.

  // Move 45 degreese first to attempt to allign to NE building.
  adjustR45();
  RotateMotor(OUT_BC, 25, pinpointF);
  int currentColor = getColor(128);
  bool adjusted = false;

  // Attempt to fix error if a black was read. This attepmpts to allign the robot
  // to the NE building, if it entered the intersection at a bad angle. 
  while (currentColor == BLK || currentColor == YEL){
    adjusted = true;
    RotateMotor(OUT_BC, -25, pinpointB);
    adjustR(60);
    RotateMotor(OUT_BC, 25, pinpointF);;
    currentColor = getColor(128);
  }
  // If the while loop above exited, we are now on a building color.
  // Read NE building.
  rsense.NE = currentColor;
  Wait(250);
  // Move to SW building and read color.
  currentColor = moveUntilBuilding(-30, currentColor, true);
  rsense.SW = currentColor;
  Wait(250);
  // Move back to yellow, and turn left 90 to allign to NW building.
  moveUntilColor(25, YEL);
  adjustL90();
  nudgeForward(25);
  // Move to NW building and read color.
  currentColor = moveUntilBuilding(30, YEL, false);
  rsense.NW = currentColor;
  Wait(250);
  // Move to SE building and read color.
  currentColor = moveUntilBuilding(-30, currentColor, true);
  rsense.SE = currentColor;
  Wait(250);
  // Move back to intersection, and turn to go back to start position.
  moveUntilColor(25, YEL);
  adjustR45();
  
  return rsense;
}


/* Given the original heading and a new heading, turns the robot to reflect
   the new heading

   This subroutine is used after the robot knows it's position
   */
sub change_direction(int orig, int new){
  ////////////////////////////////////////////////////////////////////////////
  // TO DO:
  //
  // Implement each of the turns specified below.
  //
  ////////////////////////////////////////////////////////////////////////////

  int change = new - orig;
  /* selects the appropriate turn based on the headings given*/
  switch (change){
    case 3:
    case -1:
      left90();
      break;
    case -3:
    case 1:
      right90();
      break;
    case 2:
    case -2: // Also need a -2 case.
      right180();
      break;
  }
}


/* Given a start coordinate, finish coordinate, and a heading, this function
   moves the robot from the start to finish.
   
   The coordinates given are in terms of index in the map array. The x and y
   coordinates need to be extracted from that index.
   
   After the robot has finished moving, the current heading of the robot is
   returned.
   
   This function is used after the robot knows it's own position.
*/
int move_to(int s, int f, int h){
  int sx, sy, fx, fy, tx, ty;
  int heading;
  // extract coordinates from given information
  sx = s/GHEIGHT;
  sy = s%GHEIGHT;
  fx = f/GHEIGHT;
  fy = f%GHEIGHT;

  /* calculate how far to go in manhatten distances */
  tx = fx - sx;
  ty = fy - sy;
  heading = h;

  ///////////////////////////////////////////////////////////////////////////
  // TO DO:
  //
  // Move the robot from the starting point described by (sx, sy) to (fx, fy)
  // Be sure to keep track of the direction the robot is facing when it
  // makes turns.
  //
  ////////////////////////////////////////////////////////////////////////////
  // Print the amount in x y that the robot needs to move in the left column,
  // and the current ammount moved by the robot on the 2nd column.
  TextOut(8, 16, NumToStr(tx));
  TextOut(8, 8, NumToStr(ty));
  TextOut(24, 16, NumToStr(0));
  TextOut(24, 8, NumToStr(0));

  // We always move in x direction first, then y.
  if (tx != 0){
    // If amount to move is not zero, we check the value of tx to see if it is 
    // negative. Negative -> west movement, positive -> east movemement. 
    if (tx < 0){
      change_direction(heading, WEST);
      heading = WEST;
    } else {
      change_direction(heading, EAST);
      heading = EAST;
    }
    // move abs(tx) intersections forward, after we've oriented to the right heading.
    int i;
    int absTx = abs(tx);
    for (i = 0; i < absTx; i++){
      move_robot();
      if (i != absTx - 1)
        nudgeForward(); // To clear yellow.
        TextOut(24, 16, NumToStr(i));
    }
  }

  if (ty != 0){
    // Identical to above, except in y direction.
    // Negative -> north movement, positive -> south movement. 
    if (ty < 0){
      change_direction(heading, NORTH);
      heading = NORTH;
    } else {
      change_direction(heading, SOUTH);
      heading = SOUTH;
    }
    int i;
    int absTy = abs(ty);
    for (i = 0; i < absTy; i++){
      move_robot();
      if (i != absTy - 1)
        nudgeForward(); // To clear yellow.
        TextOut(24, 8, NumToStr(i));
    }
  }
  return heading;
}

/* This function takes a particle and returns an updated particle after moving

   To "move" a particle is to move it forward in the direction of the particle.
   We move these particles in the same way we would move the robot.
   
   Upon reaching a boundary, the particle is turned 180 degrees around.

*/
particle move(particle p){

  ///////////////////////////////////////////////////////////////////////
  // TO DO:
  //
  // Move particle p forward one interesection in the direction it is
  // facing.
  // Similar to the robot's behaviour, if a particle reaches the end of
  // the map, it turns in the opposite direction and returns to the
  // previous intersection it was at.
  //
  ///////////////////////////////////////////////////////////////////////

  if(p.theta == NORTH)
    p.y -= 1;
  else if(p.theta == SOUTH)
    p.y += 1;
  else if(p.theta == EAST)
    p.x += 1;
  else if(p.theta == WEST)
    p.x -= 1;
    
   //bounce at boundry 
  if(p.x > 2){
    p.theta = WEST;
    p.x -= 1;
  }
  else if(p.x < 0){
    p.theta = EAST;
    p.x += 1;
  }
  else if(p.y > 4){
    p.theta = NORTH;
    p.y -= 1;
  }
  else if(p.y < 0){
    p.theta = SOUTH;
    p.y += 1;
  }    
  return p;
}

/* This function returns data on interesection surroundings for particles.

   Based on the map data array, we want the colour of the square at the given x
   and y coordinates in direction dir which is one of NE, SE, SW, NW.
   
   Take note that the heading given will change the percieved directions.
   For example, facing north, NE in terms of compass directions is northeast.
   Facing south however, NE in terms of compass directions is southwest.
   
   Because the robot does not know it's own heading, the particles must reflect
   this by using sensing relative to heading.
*/
int sense(intersection map[], int x, int y, int dir, int heading){

  ////////////////////////////////////////////////////////////////////////////
  // TO DO:
  //
  // Implement the function which checks the surroundings of the particle at
  // (x, y) facing the direction given by heading.
  //
  // The data you need to determine the particle's surroundings is given by
  // the map data array.
  //
  // The integer returned is the
  // colour of the square in the direction of dir which is one of NE, SE, SW,
  // or NW.
  // Keep in mind that the direction is relative to the heading as mentioned
  // in the function description.
  //
  ////////////////////////////////////////////////////////////////////////////

  // Convert heading and relative dir (to heading) to absolute direction (relative to north)
  int absDir = absDirection(heading, dir);
  if (absDir == NORTHEAST)
    return map[coordToIndex(x, y)].NE;
  if (absDir == SOUTHEAST)
    return map[coordToIndex(x, y)].SE;
  if (absDir == SOUTHWEST)
    return map[coordToIndex(x, y)].SW;
  if (absDir == NORTHWEST)
    return map[coordToIndex(x, y)].NW;
}

/* The main task which initializes data
   and executes the update loop for the particle filters
*/
task main(){

  /* variable declarations */
  intersection map [GWIDTH *GHEIGHT]; /* holds map data */

  int guess[3]; /* holds x y and theta of the best guess at robot's position */
  float robp = 0; /* holds the prob that the robot is at guess */
  intersection rsense; /* holds data about the robot's surroundings */

  particle list[GWIDTH*GHEIGHT*4]; /* list of particles */
  int psense[4]; /* holds data on a particle's surroundings */

  int i, j; /* variables for loop counters */
  int hits, misses; /* keeps track of how many of a particle's
                      surroundings match the robot's */
  float maxprob, totalprob;

  byte fd, charat;         /* variables for file descriptors and characters */
  string line;
  int target, dest; /* records the target and destination coordinates for use
                      after finding the robot's position */

  float mismatchMults[] = {1.0, 0.8, 0.4, 0.13, 0.03};

  /* sensor initialization */
  SetSensorColorFull(IN_1);

  /* initialize the particle list, each coordinate has 4 particles, one for each direction */
  for (i = 0; i < GWIDTH*GHEIGHT*4;i = i + 4){
    list[i].x=(i/4)%GWIDTH;
    list[i].y=i/(4*GWIDTH);
    list[i].theta = NORTH;
    list[i].prob = 1.0/(GWIDTH*GHEIGHT*4);
    list[i+1].x=(i/4)%GWIDTH;
    list[i+1].y=i/(4*GWIDTH);
    list[i+1].theta = SOUTH;
    list[i+1].prob = 1.0/(GWIDTH*GHEIGHT*4);
    list[i+2].x=(i/4)%GWIDTH;
    list[i+2].y=i/(4*GWIDTH);
    list[i+2].theta = EAST;
    list[i+2].prob = 1.0/(GWIDTH*GHEIGHT*4);
    list[i+3].x=(i/4)%GWIDTH;
    list[i+3].y=i/(4*GWIDTH);
    list[i+3].theta = WEST;
    list[i+3].prob = 1.0/(GWIDTH*GHEIGHT*4);
  }
   
  /* Initialize the map and target from file

  The format of the file:
    - one line per intersection containing 4 integers seperated by spaces
      these integers represent NE SE SW NW respectively
    - the order of the intersections is rows top to bottom then columns
      left to right
    - after all the intersection data there are two lines with 2 integers
      each. this describes the target and destination that the robot must
      move to after finding its position
      
  Colour values are based on NXC colour sensor constants

  Array format:
    - indices are obtained using the formula i = GHEIGHT*x + y
    - each index contains an interesction element that holds information
      about it's surroundings
  */
  fd = fopen(FILENAME, "r");
  /* read as many lines as there are squares on the grid */
  for (i=0; i < GWIDTH*GHEIGHT; i++){
    fgets(line, READSIZE, fd);
    /* parse each line into the coresponding directions and store them in
      the map data array */
    for (j = 0; j < 7; j = j + 2){
      charat = StrIndex(line, j);
      switch (j){
        case 0:
          map[i].NE = ASCII_TO_INT(charat);
          break;
        case 2:
          map[i].SE = ASCII_TO_INT(charat);
          break;
        case 4:
          map[i].SW = ASCII_TO_INT(charat);
          break;
        case 6:
          map[i].NW = ASCII_TO_INT(charat);
          break;
      }
    }
  }
  /* read information about the target which should be following the map data */
  fgets(line, READSIZE, fd);
  charat = StrIndex(line,0);
  target = ASCII_TO_INT(charat);
  target = target*GHEIGHT; // add x coordinate calculation
  charat = StrIndex(line,2);
  target = target + ASCII_TO_INT(charat); // add y coordinate
      
  /* read information about the destination which sould be following the target data */
  fgets(line, READSIZE, fd);
  charat = StrIndex(line,0);
  dest = ASCII_TO_INT(charat);
  dest = dest*GHEIGHT; // add x coordinate calculation
  charat = StrIndex(line,2);
  dest = dest + ASCII_TO_INT(charat); // add y coordinate

  fclose(fd); /* file reading finished */

  /* main execution loop for particle filter

    How particle filters work:

    Normally we would have a list of particles initilalized with random
    coordinates and headings.

    At each iteration of the loop, we move the robot and the particles.
    Surroundings for both are examined and compared.
    
    Particles which have surroundings that seem close to the robots are given
    larger weights compared to those that don't.
    
    We then choose from the particles in a way that the particles with higher
    weights are likley to remain, while particles with smaller weights are
    eliminated. This is called resampling.
    
    After several iterations, we would have a group of particles which is
    very likley to represent the robot's actual position.
    
    How this implementation works:
    
    We have simplified the large possibility of coordinates to a grid.
    
    === Particle List ===
    For each intersection on the grid map, we have four particles.
    One for each of north, east, south, and west, which the robot could be
    facing since it will move vertically and horizontally.
    These are all the possible starting positions and headings the robot could
    have.
    
    === Updating weights ===
    Each iteration we reasign the particle weights.
    We move the robot, and also the particles.
    The surroundings, being the four coloured squares around the intersection
    are checked. The robot's and particles surroundings are compared and the
    weights are changed based on whether they match or not.
    
    === Resampling ==
    Take note that we do NOT do resampling in this implementation.
    Instead we have a probability threshold that a particle must pass to be
    accepted as the actual position of the robot.
    
  */
   
  ////////////////////////////////////////////////////////////////////////////
  // TO DO:
  //
  // Write the main particle filter execution loop. It will loop until a
  // particle weight reaches the threshold
  //
  // At each iteration the following steps take place:
  //    - robot checks its surroundings
  //    - each particle checks its surroundings and compares them with the
  //      robot's
  //    - adjust particle weights based on the comparison
  //    - normalize particle weights
  //    - find the best guess of the robot's position
  //    - move the robot and the particles forward to the next intersection
  //
  /////////////////////////////////////////////////////////////////////////////

  while (robp < THRESHOLD){ /* run the update loop until an acceptable
                             probability is obtained */
    move_robot();
    //check robots surrounding
    rsense = scan_surroundings();
    nudgeForward(); // To clear yellow.
    //check each particles surroundings, and assign the corresponding probability
    for(i = 0; i < 60; i ++){
      psense[0] = sense(map, list[i].x, list[i].y, NORTHEAST, list[i].theta);
      psense[1] = sense(map, list[i].x, list[i].y, SOUTHEAST, list[i].theta);
      psense[2] = sense(map, list[i].x, list[i].y, SOUTHWEST, list[i].theta);
      psense[3] = sense(map, list[i].x, list[i].y, NORTHWEST, list[i].theta);

      misses = 0;
      if (psense[0] != rsense.NE) misses ++;
      if (psense[1] != rsense.SE) misses ++;
      if (psense[2] != rsense.SW) misses ++;
      if (psense[3] != rsense.NW) misses ++;

      list[i].prob = list[i].prob * mismatchMults[misses];
    }
    // Find total probability
    totalprob = 0;
    for (i = 0; i < 60; i++){
      totalprob += list[i].prob;
    }
    // Normalize all particle probabilities using total probability. 
    for(i = 0; i < 60; i ++){
      list[i].prob = list[i].prob / totalprob;
    }
    robp = 0;
    j = 0; // For keeping track of the most likely particle's index.
    // Find the most likely particle, and get its probability.
    for(i = 0; i < 60; i++){
      if (robp < list[i].prob){
        robp = list[i].prob;
        j = i;
      }
    }
    // Set guess to contain the info of the most likely particle.
    guess[0] = list[j].x;
    guess[1] = list[j].y;
    guess[2] = list[j].theta;
    
    // Print robot particle color reading, robot color reading, and particle x, y, theta, and prob.
    // Paricle displayed is the most likely particle. 
    // first row from left: particle color read top to bottom: NE, SE, SW, NW
    // second row from left: robot sensor reading from top to bottom: NE, SE, SW, NW
    // third row from left: particle properties from top to bottom: x, y, theta, prob
    TextOut(8, 32, NumToStr(sense(map, list[j].x, list[j].y, NORTHEAST, list[j].theta)));
    TextOut(8, 24, NumToStr(sense(map, list[j].x, list[j].y, SOUTHEAST, list[j].theta)));
    TextOut(8, 16, NumToStr(sense(map, list[j].x, list[j].y, SOUTHWEST, list[j].theta)));
    TextOut(8, 8, NumToStr(sense(map, list[j].x, list[j].y, NORTHWEST, list[j].theta)));
    TextOut(16, 32, NumToStr(rsense.NE));
    TextOut(16, 24, NumToStr(rsense.SE));
    TextOut(16, 16, NumToStr(rsense.SW));
    TextOut(16, 8, NumToStr(rsense.NW));
    TextOut(24, 32, NumToStr(list[j].x));
    TextOut(24, 24, NumToStr(list[j].y));
    TextOut(24, 16, NumToStr(list[j].theta));
    TextOut(24, 8, NumToStr(list[j].prob));

    // Move robots 
    for (i = 0; i < 60; i++){
      list[i] = move(list[i]);
    }
  }
  nudgeForward(-20); // Reverse the nudge we done in the loop. 
  PlayToneEx(Random(1000) + 200, 400, 3, FALSE);

  /* When we are fairly confident about the robot's position, we can move on
    to the task given.
    
    Once the robot has found where it is, it must head to the target given in
    the initialization file.
    After picking up the confidential item at the target point it must move to
    the delivery point given by the destination from the initialization file.
    
  */
  ClearScreen();
  guess[2] = move_to(guess[0]*GHEIGHT + guess[1], target, guess[2]);
  PlayToneEx(Random(1000) + 200, 400, 3, FALSE);
  move_to(target, dest,guess[2]);
  // Final fantasy victory theme. Bonus marks for using it?
  PlayFileEx("FFIV_vic-start.rso", 4, FALSE);
  Wait(3586);
  PlayFileEx("FFVI_vic-loop.rso", 4, TRUE);
  Wait(28688);
}

