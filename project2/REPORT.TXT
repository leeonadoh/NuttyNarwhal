CSCC85 - Embedded Systems

Project 2 - Lander Control
______________________________________________________________________

Team name: Nutty Narwhals

Name 1 (last, first): Li, Leo (Sunpeng)
Student number 1: 999093421

Name 2 (last, first): Laljeet, Ryan
Student number 2:

Name 3 (last, first): Law, Dickson
Student number 3:

(special: Lose marks for not completing the above information)
_______________________________________________________________________

Please note below what parts of your task were completed, and for
incomplete tasks, give a brief description of progress and how
you think the task could be completed

a) The program can land the craft safely in mode '1'
  
   - for the 'easy.ppm' map (yes/no) Yes
   - for the 'hard.ppm' map (yes/no) Yes

   If it fails, describe the conditions in which it fails and how
   you think this could be resolved

b) The program can land the craft safely in mode '2'
  
   - for the 'easy.ppm' map (yes/no) Yes
   - for the 'hard.ppm' map (yes/no) No

   If it fails, describe the conditions in which it fails and how
   you think this could be resolved

    All sensor combinations (any two sensor failures) are accounted for, other than sonar. It was left incomplete due to time constraints.

    To solve this, we would have to rotate the lander at a set interval to take distance readings. We wouldn't have to record all 36 slices, but take rough readings in 8 slices, each 45 degrees apart. We could also makes this simpler by leaving top slices out, making this scanning process faster.
_______________________________________________________________________

Questions:

1) What was the impact of having noisy sensors in your ability to
   determine the state of the craft and ultimately control it 
   properly?

    When all sensors are working normally, noise is not a big issue. The number of times each sensor is called (once per iteration) is large enough that the noise eventually cancels each other out.

    The noise becomes problematic when we need to derive another sensor's reading from a sensor. For example, when deriving position x (x) readings from velocity x (x'), noise in x' will accumulate onto the derived x reading. Since there is no effective way for us to "refresh" x, x will get worse as time goes, eventually causing the lander to be unable to land. 

2) Describe the technique(s) you used to deal with sensor noise
    
    Through analysis of the noise produced by each functional sensor, we found that they had a mean of zero. This means with a sample size n sufficiently large, sampling a functional sensor n times will produce an average that is reasonably close to the actual value. 

    This of course, may not be accurate enough for some cases. In the case of x' sensor failing, the derivative of x readings is calculated as a replacement. Since delta x values between each iteration is so minute, the smallest amount of noise can cause the derived x' reading to become unusable. The solution then is to sample x over a longer duration of time to produce a larger and better delta x reading. 


3) Describe your strategy for dealing with thruster failures
    
    We decided eventually to scrap the idea of using both Lander_Control and Safety_Override as separate functions, but to compose them into one. Reason being that for our control model, data from both safety override and lander control is used to calculate a "final thrust sector" - a sector numbered between 0 and 7 that dictates a direction to apply thrust. 

    The final sector is calculated using various input values best described in the tree below:

                             finalSector
                      (final thrust direction)
                            /           \
              SafetyOverride             LanderControl
                direction                  direction
                /       \
         Velocity     Closest Obstacle
        direction         direction  

    To compose the value of a parent node, a weight is calculated in the range of [0, 1]. A weight of 1 

4) Describe your strategy for dealing with sensor malfunctions:

   - Position sensors
   - Velocity sensors
   - Angle
   - Sonar

   What if you have multiple failures? What could you do if, for
   example both position and velocity sensors became inoperative?

5) What was the hardest failure type to deal with (i.e. which is
   the component, either sensor or control that makes the lander
   harder to handle?)?

6) Assume a human pilot was in charge of controlling the craft 
   (i.e. the pilot has control of thrusters and rotation).
   How would you change Safety_Override() so that it prevents
   the pilot from accidentally crashing the lander?
   
7) Do you think it is reasonable to write such a control function?
   (i.e. a routine that takes control from a human for their
    own safety)

8) Should the pilot be aware that this software is present?
   (yes or no, and tell me why you think so!)

9) Would you buy/drive a car that you know has control software
   that will take control from you if it estimates you are
   doing something dangerous?

10) Can you as an embedded systems designer think of every 
    possible scenario that could go wrong so as to write 
    control software that ALWAYS works?

    Think about that...
________________________________________________________________

Grading:

- Answers in this REPORT      /10
- Software to land craft in mode '1'    /40
- Software to land craft in mode '2'    /45
- Style and coding structure      /5

Total for Project #3        /100 (*)

(*) Mark is conditional on all members of the team being able
    to explain any component of the solution when asked.
